<?php

/**
 * Provides a small function that is always available to quickly add an object
 * to the syndication queue.
 *
 * @param string $remote_machine_name The machine name of a remote server OR
 *   the base URL of a server.
 * @param string $profile The name of the profile to queue with
 * @param mixed $object The object to queue for syndication
 * @param boolean $urgent TRUE to use urgent syndication, otherwise FALSE
 * @return boolean TRUE if the object was queued, otherwise FALSE.
 */
function _secsyn_fast_queue($remote_machine_name, $profile, $object, $urgent = FALSE) {
  if ($urgent && (!user_access('urgent syndication'))) {
    $urgent = FALSE;
  }
  $engine = new SecureSyndicationEngine();
  $remote = twoway_server_load($remote_machine_name);
  if (empty($remote)) {
    $remote = $remote_machine_name;
  } else {
    $remote = $remote['server_connection'];
  }
  return $engine->queue($remote, $profile, $object, $urgent);
}

/**
 *
 */
function _secsyn_common_fields_submit($profile, &$object, &$form_state, $show_messages = TRUE) {
  foreach ($form_state['values']['syndication'] as $server_machine_name => $syndication_settings) {
    if ($syndication_settings['syndicate']) {
      _secsyn_fast_queue($server_machine_name, $profile, $object, $syndication_settings['urgent'], $show_messages);
    }
    $modules = module_implements('secsyn_common_fields_submit');
    foreach ($modules as $module) {
      $hook = $module . '_secsyn_common_fields_submit';
      $hook($profile, $object, $server_machine_name, $syndication_settings, $show_messages);
    }
  }
}


/**
 * Other modules can use this to add the remote server list and common
 * syndication settings to a form.
 *
 * @param array $form FAPI array
 */
function _secsyn_common_fields(&$form, $object, $profile) {
  $form['syndication'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#title' => t('Syndication Settings'),
    '#tree' => TRUE,
  );
  $servers = variable_get('secsyn_links_servers', array());
  $modules = module_implements('secsyn_common_fields');
  $first = TRUE;
  foreach ($servers as $server_name) {
    $server = twoway_server_load($server_name);
    $subform = array();
    $subform['markup'] = array(
      '#markup' => '<tr><td>' . $server['server_display'] . '</td>'
    );
    if ($first) {
      $subform['markup']['#prefix'] = '<table><tr>'._secsyn_common_fields_header().'</tr>';
    }
    $subform['syndicate'] = array(
      '#type' => 'checkbox',
      '#prefix' => '<td>',
      '#suffix' => '</td>',
    );
    if (user_access('urgent syndication')) {
      $subform['urgent'] = array(
        '#type' => 'checkbox',
      '#prefix' => '<td>',
      '#suffix' => '</td>',
      );
    } else {
      $subform['urgent'] = array(
        '#type' => 'value',
        '#value' => FALSE,
      );
    }
    foreach ($modules as $module) {
      $hook = $module . '_secsyn_common_fields';
      $hook($subform, $profile, $object, $server_name);
    }
    $form['syndication'][$server_name] = $subform;
  }
  $form['syndication']['finish'] = array('#markup' => '</table>');

}


function _secsyn_common_fields_header() {
  $header = array(
    'Server Name' => '*',
    'Syndicate' => '50px',
    'Urgent' => '50px',
  );
  drupal_alter('secsyn_common_fields_header', $header);
  $str = '';
  foreach ($header as $name => $width) {
    $str .= '<th';
    if ($width != '*') {
      $str .= ' style="width: ' . $width . ';"';
    }
    $str .= '>' . t($name) . '</th>';
  }
  return $str;
}

function _secsyn_validate_options($form, &$form_state) {
  $modules = module_implements('secsyn_common_fields_validate');
  foreach ($modules as $module) {
    $hook = $module . '_secsyn_common_fields_validate';
    $hook($form, $form_state);
  }
}

function _secsyn_build_options($form, &$form_state) {
  $modules = module_implements('secsyn_common_fields_values');
  $options = array();
  foreach ($modules as $module) {
    $hook = $module . '_secsyn_common_fields_values';
    $hook($options, $form, $form_state);
  }
  return $hook;
}

/**
 * Implements hook_permission().
 */
function secsyn_permission() {
  return array(
    'syndicate object' => array(
      'title' => t('Queue objects for syndication'),
      'description' => t('Users will be able to queue objects to be syndicated to remove servers'),
    ),
    'bulk syndicate' => array(
      'title' => t('Queue objects in bulk for syndication'),
      'description' => t('Users will be able to queue objects in bulk to be syndicated'),
      'restrict access' => TRUE,
    ),
    'trigger syndication' => array(
      'title' => t('Trigger syndication immediately'),
      'description' => t('Users will be able to trigger the syndication process'),
      'restrict access' => TRUE,
    ),
    'urgent syndication' => array(
      'title' => t('Urgent syndication'),
      'description' => t('Users will be able to trigger urgent syndications'),
      'restrict access' => TRUE,
    ),
    'receive syndication' => array(
      'title' => t('Accept syndication'),
      'description' => t('Users will be able to use the service for syndication'),
      'restrict access' => TRUE,
    ),
    'secsyn links default' => array(
      'title' => t('Manage content servers'),
      'description' => t('This user will be able to change the defaults for
        persistent links'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function secsyn_menu() {
  return array(
    // @todo Consider better naming and location for these files
    // (possibly under admin/config?)
    'admin/content/syndication' => array(
      'title' => 'Syndication Command Centre',
      'description' => 'List of all the items on the syndication queue',
      'page callback' => 'secsyn_status_page',
      'access arguments' => array('trigger syndication'),
      'file' => 'secsyn.pages.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
    'admin/content/syndication/report' => array(
      'title' => 'Bridge',
      'description' => 'List of all the items on the syndication queue',
      'page callback' => 'secsyn_status_page',
      'access arguments' => array('trigger syndication'),
      'file' => 'secsyn.pages.inc',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
    ),
    'admin/content/syndication/go' => array(
      'title' => 'Force Syndication',
      'description' => 'Triggers syndication immediately',
      'page callback' => 'secsyn_force_page',
      'access arguments' => array('trigger syndication'),
      'file' => 'secsyn.pages.inc',
      'type' => MENU_LOCAL_ACTION,
      'weight' => 20,
    ),
    'admin/config/syndication' => array(
      'title' => 'Syndication Settings',
      'description' => 'Tools for syndication',
      'position' => 'right',
      'weight' => 10,
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file' => 'system.admin.inc',
      'module' => 'system',
    ),
    'admin/config/syndication/links' => array(
      'title' => 'Content Servers',
      'description' => 'Control which servers are available to send content to.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('secsyn_links_admin_form'),
      'access arguments' => array('secsyn links default'),
      'file' => 'secsyn.pages.inc',
    ),
    'admin/config/syndication/links/servers' => array(
      'title' => 'Content Servers',
      'type' => MENU_DEFAULT_LOCAL_TASK & MENU_LOCAL_TASK,
      'weight' => -10,
      'access arguments' => array('secsyn links default'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function secsyn_cron() {
  // @todo configurable delay setting on how often syndication should run
  // we fire our own pre-cron event in order to let modules act immediately
  // before we syndicate from cron.
  module_invoke_all('secsyn_precron');
  module_load_include('inc', 'secsyn', 'secsyn.functions');
  secsyn_syndicate_all(TRUE);
}

/**
 * Implements hook_twoway_service().
 */
function secsyn_twoway_service() {
  return array(
    'check' => array(
      'callback' => 'secsyn_service_do_check',
      'service_file' => 'services/secsyn.check.inc',
      'description' => 'Verifies which objects need to be synchronized',
    ),
    'sync' => array(
      'callback' => 'secsyn_service_do_sync',
      'service_file' => 'services/secsyn.sync.inc',
      'description' => 'Synchronizes objects with the remote server'
    ),
  );
}